@page "/api/Miembro"
@using AppAsisten.Shared.DTO
@inject IHttpServicio http
@inject NavigationManager navigationManager

<h3>Registrar Miembro</h3>

<EditForm Model="nuevoMiembro" OnValidSubmit="RegistrarMiembro">
    <DataAnnotationsValidator />

    <!-- Campo de Código QR -->
    <div class="form-group">
        <label>Código QR</label>
        <div>
            <InputText class="form-control" @bind-Value="nuevoMiembro.CodigoQR" />
            <ValidationMessage For="@(() => nuevoMiembro.CodigoQR)" />
        </div>
    </div>

    <!-- Campo de Nombre -->
    <div class="form-group">
        <label>Nombre</label>
        <div>
            <InputText class="form-control" @bind-Value="nuevoMiembro.Nombre" />
            <ValidationMessage For="@(() => nuevoMiembro.Nombre)" />
        </div>
    </div>

    <!-- Campo de Edad -->
    <div class="form-group">
        <label>Edad</label>
        <div>
            <InputNumber class="form-control" @bind-Value="nuevoMiembro.Edad" />
            <ValidationMessage For="@(() => nuevoMiembro.Edad)" />
        </div>
    </div>

    <br />
    <button class="btn btn-primary" type="submit">Registrar</button>
    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>

@if (!string.IsNullOrEmpty(resultado))
{
    <div class="alert @alertClass mt-3">
        @resultado
    </div>
}

@code {
    private MiembroDTO nuevoMiembro = new MiembroDTO();
    private string resultado;  // Mensaje para mostrar el resultado de la operación
    private string alertClass;  // Clase para la alerta (exito o error)

    private async Task RegistrarMiembro()
    {
        try
        {
            // Enviar los datos al backend
            var httpRespuesta = await http.Post<MiembroDTO>("api/Miembro/registrar-miembro", nuevoMiembro);

            if (httpRespuesta != null)
            {
                // Si la respuesta es exitosa
                resultado = "Miembro registrado exitosamente!";
                alertClass = "alert-success";

                // Redirigir a otra página después de mostrar el mensaje (si es necesario)
                navigationManager.NavigateTo("api/Miembro");
            }
            else
            {
                // Si no se pudo registrar
                resultado = "Hubo un error al registrar el miembro.";
                alertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            // En caso de error de red o fallo en la API
            resultado = $"Error al registrar el miembro: {ex.Message}";
            alertClass = "alert-danger";
        }
    }

    private void Cancelar()
    {
        // Volver a la página principal o a la vista de miembros
        navigationManager.NavigateTo("api/Miembro");
    }

    public class MiembroDTO
    {
        public string CodigoQR { get; set; }
        public string Nombre { get; set; }
        public int Edad { get; set; }
    }
}
